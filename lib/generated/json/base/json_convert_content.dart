// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:news/model/sorces_resonse_entity.dart';
import 'package:news/generated/json/sorces_resonse_entity_helper.dart';
import 'package:news/model/news_response_entity.dart';
import 'package:news/generated/json/news_response_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case SorcesResonseEntity:
				return sorcesResonseEntityFromJson(data as SorcesResonseEntity, json) as T;
			case SorcesResonseSource:
				return sorcesResonseSourceFromJson(data as SorcesResonseSource, json) as T;
			case NewsResponseEntity:
				return newsResponseEntityFromJson(data as NewsResponseEntity, json) as T;
			case NewsResponseArticle:
				return newsResponseArticleFromJson(data as NewsResponseArticle, json) as T;
			case NewsResponseArticlesSource:
				return newsResponseArticlesSourceFromJson(data as NewsResponseArticlesSource, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case SorcesResonseEntity:
				return sorcesResonseEntityToJson(data as SorcesResonseEntity);
			case SorcesResonseSource:
				return sorcesResonseSourceToJson(data as SorcesResonseSource);
			case NewsResponseEntity:
				return newsResponseEntityToJson(data as NewsResponseEntity);
			case NewsResponseArticle:
				return newsResponseArticleToJson(data as NewsResponseArticle);
			case NewsResponseArticlesSource:
				return newsResponseArticlesSourceToJson(data as NewsResponseArticlesSource);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (SorcesResonseEntity).toString()){
			return SorcesResonseEntity().fromJson(json);
		}	else if(type == (SorcesResonseSource).toString()){
			return SorcesResonseSource().fromJson(json);
		}	else if(type == (NewsResponseEntity).toString()){
			return NewsResponseEntity().fromJson(json);
		}	else if(type == (NewsResponseArticle).toString()){
			return NewsResponseArticle().fromJson(json);
		}	else if(type == (NewsResponseArticlesSource).toString()){
			return NewsResponseArticlesSource().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(List<SorcesResonseEntity>() is M){
			return data.map<SorcesResonseEntity>((e) => SorcesResonseEntity().fromJson(e)).toList() as M;
		}	else if(List<SorcesResonseSource>() is M){
			return data.map<SorcesResonseSource>((e) => SorcesResonseSource().fromJson(e)).toList() as M;
		}	else if(List<NewsResponseEntity>() is M){
			return data.map<NewsResponseEntity>((e) => NewsResponseEntity().fromJson(e)).toList() as M;
		}	else if(List<NewsResponseArticle>() is M){
			return data.map<NewsResponseArticle>((e) => NewsResponseArticle().fromJson(e)).toList() as M;
		}	else if(List<NewsResponseArticlesSource>() is M){
			return data.map<NewsResponseArticlesSource>((e) => NewsResponseArticlesSource().fromJson(e)).toList() as M;
		}
		return null;
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }


}